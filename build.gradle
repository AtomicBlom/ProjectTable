buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

import org.apache.tools.ant.filters.ReplaceTokens

// define the properties file
def isCIBuild = hasProperty("CIRevision")
if (isCIBuild) {
    println("Producing a Release build")
} else {
    println("This build will produce an unsactioned release")
}

// combine in the dependency properties file
Properties props = new Properties()
props.load(new FileInputStream("./dependency.properties"))
props.each { prop ->
    project.ext.set(prop.key, prop.value)
}


version = (hasProperty("CIRevision") ? CIRevision : project.mod_version)
group = project.group_name
archivesBaseName = "${project.mod_id}-${project.minecraft_version_on_jar}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: project.mcp_mappings
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                projecttable {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                projecttable {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/')

            mods {
                projecttable {
                    source sourceSets.main
                }
            }
        }
    }
}

task processSource(type: Sync) {
    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [IS_CI_BUILD: isCIBuild.toString()])
    into "$buildDir/src"
}

compileJava {
    source = processSource.outputs
}

repositories { //Access to Gigaherz private maven server for community mappings
    maven { url = 'https://www.dogforce-games.com/maven/'       } // 1.16 mappings
    //maven { url = 'https://maven.blamejared.com/'               } // IE
    //maven { url = "https://minecraft.curseforge.com/api/maven/" } // Other mods to test with
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + project.minecraft_version + '-' + project.forge_version
    //compile fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:1.16.1-4.0.0-pre.58")
    //compile fg.deobf("elements-of-power:ElementsOfPower-1.16.1:latest:alpha")
}

jar {
    manifest {
        attributes([
            "Specification-Title": project.mod_id,
            "Specification-Vendor": "atomicblom",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"atomicblom",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "9999"
        }
    }
}